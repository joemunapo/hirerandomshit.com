name: Sync Tasks to Issues

on:
  push:
    paths:
      - 'tasks/*.json'

permissions:
  contents: read
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Sync /tasks/*.json -> Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const tasksDir = path.join(process.cwd(), 'tasks');
            if (!fs.existsSync(tasksDir)) {
              core.info('No tasks/ directory. Nothing to sync.');
              return;
            }

            const files = fs.readdirSync(tasksDir).filter(f => f.endsWith('.json'));
            if (files.length === 0) {
              core.info('No task JSON files found. Nothing to sync.');
              return;
            }

            // Ensure a label exists (idempotent)
            async function ensureLabel(name) {
              if (!name) return;
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (e) {
                // create if 404
                await github.rest.issues.createLabel({
                  owner, repo, name,
                  color: '6e7781',
                  description: 'auto-created by task-sync'
                });
              }
            }

            // Create or update an issue for a TaskSpec
            async function upsertIssue(task) {
              const titleText = `${task.id} â€“ ${task.title}`;
              const body = `TaskSpec:\n\`\`\`json\n${JSON.stringify(task, null, 2)}\n\`\`\`\n`;

              const q = `repo:${owner}/${repo} in:title "${task.id}"`;
              const search = await github.rest.search.issuesAndPullRequests({ q, per_page: 10 });
              let issue = search.data.items.find(i => i.title.startsWith(task.id));

              // Ensure labels exist
              const labels = Array.isArray(task.labels) ? task.labels : [];
              for (const l of labels) await ensureLabel(l);

              if (!issue) {
                const created = await github.rest.issues.create({
                  owner, repo, title: titleText, body, labels
                });
                core.info(`Created issue #${created.data.number} for ${task.id}`);
              } else {
                await github.rest.issues.update({
                  owner, repo, issue_number: issue.number,
                  title: titleText, body
                });
                if (labels.length) {
                  await github.rest.issues.addLabels({
                    owner, repo, issue_number: issue.number,
                    labels
                  });
                }
                core.info(`Updated issue #${issue.number} for ${task.id}`);
              }
            }

            for (const file of files) {
              const full = path.join(tasksDir, file);
              try {
                const raw = fs.readFileSync(full, 'utf8');
                const task = JSON.parse(raw);

                if (!task.id || !task.title) {
                  core.warning(`Skipping ${file}: missing id or title`);
                  continue;
                }
                await upsertIssue(task);
              } catch (err) {
                core.setFailed(`Failed processing ${file}: ${err.message}`);
              }
            }
